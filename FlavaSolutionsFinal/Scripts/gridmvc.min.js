window.pageGrids = window.pageGrids || {}, $.fn.extend({ gridmvc: function () { var e = []; return $(this).each(function () { if ($(this).data("gridmvc")) e.push($(this).data("gridmvc")); else { var t = { lang: $(this).attr("data-lang"), selectable: "true" == $(this).attr("data-selectable"), multiplefilters: "true" == $(this).attr("data-multiplefilters") }, i = new GridMvc(this, t), n = $(this).attr("data-gridname"); n.length > 0 && (window.pageGrids[$(this).attr("data-gridname")] = i), e.push(i), $(this).data("gridmvc", i) } }), 1 == e.length ? e[0] : e } }), GridMvc = function (e) { function t(t, i) { this.jqContainer = e(t), i = i || {}, this.options = e.extend({}, this.defaults(), i), this.init() } return t.prototype.init = function () { this.lang = GridMvc.lang[this.options.lang], "undefined" == typeof this.lang && (this.lang = GridMvc.lang.en), this.events = [], this.options.selectable && this.initGridRowsEvents(), this.filterWidgets = [], this.addFilterWidget(new TextFilterWidget), this.addFilterWidget(new NumberFilterWidget), this.addFilterWidget(new DateTimeFilterWidget), this.addFilterWidget(new BooleanFilterWidget), this.openedMenuBtn = null, this.initFilters() }, t.prototype.initGridRowsEvents = function () { var e = this; this.jqContainer.on("click", ".grid-row", function () { e.rowClicked.call(this, e) }) }, t.prototype.rowClicked = function (t) { if (t.options.selectable) { var i = e(this).closest(".grid-row"); if (!(i.length <= 0)) { var n = {}; i.find(".grid-cell").each(function () { var t = e(this).attr("data-name"); t.length > 0 && (n[t] = e(this).text()) }); var r = e.Event("RowClicked"); t.notifyOnRowSelect(n, r), r.isDefaultPrevented() || t.markRowSelected(i) } } }, t.prototype.markRowSelected = function (e) { this.jqContainer.find(".grid-row.grid-row-selected").removeClass("grid-row-selected"), e.addClass("grid-row-selected") }, t.prototype.defaults = function () { return { selectable: !0, multiplefilters: !1, lang: "en" } }, t.prototype.onRowSelect = function (e) { this.events.push({ name: "onRowSelect", callback: e }) }, t.prototype.notifyOnRowSelect = function (e, t) { t.row = e, this.notifyEvent("onRowSelect", t) }, t.prototype.notifyEvent = function (e, t) { for (var i = 0; i < this.events.length && (this.events[i].name != e || this.events[i].callback(t)) ; i++); }, t.prototype.initFilters = function () { var t = this.filterMenuHtml(), i = this; this.jqContainer.find(".grid-filter").each(function () { e(this).click(function () { return i.openFilterPopup.call(this, i, t) }) }) }, t.prototype.openFilterPopup = function (t, i) { var n = e(this).attr("data-type") || "", r = t.getFilterWidgetForType(n); if (null == r) return !1; if (this.hasAttribute("data-rendered")) { var l = t.openMenuOnClick.call(this, t); return t.setupPopupInitialPosition(e(this)), l || "undefined" == typeof r.onShow || r.onShow(), l } var a = e(this).attr("data-name") || "", o = e(this).attr("data-filterdata") || "", s = e(this).attr("data-widgetdata") || "{}", d = t.parseFilterValues(o) || {}, p = e(this).attr("data-url") || ""; e(this).attr("data-rendered", "1"), e(this).append(i); var c = e(this).find(".grid-popup-widget"); if ("undefined" != typeof r.onRender && r.onRender(c, t.lang, n, d, function (e) { t.closeOpenedPopups(), t.applyFilterValues(p, a, e, !1) }, e.parseJSON(s)), e(this).find(".grid-filter-btn").hasClass("filtered") && r.showClearFilterButton()) { var u = e(this).find(".grid-popup-additional"); u.append(t.getClearFilterButton(p)), u.find(".grid-filter-clear").click(function () { t.applyFilterValues(p, a, "", !0) }) } var f = t.openMenuOnClick.call(this, t); return "undefined" != typeof r.onShow && r.onShow(), t.setupPopupInitialPosition(e(this)), f }, t.prototype.setupPopupInitialPosition = function (t) { function i() { var e = t.find(".grid-dropdown-arrow"); return { arrow: e, currentDropLeft: parseInt(n.css("left")), currentArrowLeft: parseInt(e.css("left")) } } var n = t.find(".grid-dropdown"), r = n.offset().left; if (0 > r) { var l = i(); return l.arrow.css({ left: l.currentArrowLeft + r - 10 + "px" }), void n.css({ left: l.currentDropLeft - r + 10 + "px" }) } var a = n.width(), o = e(window).width() + e(window).scrollLeft() - (r + a); if (0 > o) { var l = i(); l.arrow.css({ left: l.currentArrowLeft - o + 5 + "px" }), n.css({ left: l.currentDropLeft + o - 5 + "px" }) } }, t.prototype.filterMenuHtml = function () { return '<div class="dropdown dropdown-menu grid-dropdown" style="display: none;">                    <div class="grid-dropdown-arrow"></div>                    <div class="grid-dropdown-inner">                            <div class="grid-popup-widget"></div>                            <div class="grid-popup-additional"></div>                    </div>                </div>' }, t.prototype.getClearFilterButton = function () { return '<ul class="menu-list">                    <li><a class="grid-filter-clear" href="javascript:void(0);">' + this.lang.clearFilterLabel + "</a></li>                </ul>" }, t.prototype.addFilterWidget = function (e) { this.filterWidgets.push(e) }, t.prototype.parseFilterValues = function (t) { for (var i = e.parseJSON(t), n = [], r = 0; r < i.length; r++) n.push({ filterValue: this.urldecode(i[r].FilterValue), filterType: i[r].FilterType, columnName: i[r].ColumnName }); return n }, t.prototype.urldecode = function (e) { return decodeURIComponent((e + "").replace(/\+/g, "%20")) }, t.prototype.getFilterWidgetForType = function (t) { for (var i = 0; i < this.filterWidgets.length; i++) if (e.inArray(t, this.filterWidgets[i].getAssociatedTypes()) >= 0) return this.filterWidgets[i]; return null }, t.prototype.replaceFilterWidget = function (t, i) { for (var n = 0; n < this.filterWidgets.length; n++) if (e.inArray(t, this.filterWidgets[n].getAssociatedTypes()) >= 0) return this.filterWidgets.splice(n, 1), this.addFilterWidget(i), !0; return !1 }, t.prototype.applyFilterValues = function (t, i, n, r) { var l = this.jqContainer.find(".grid-filter"); t.length > 0 && (t += "&"); var a = ""; if (r || (a += this.getFilterQueryData(i, n)), this.options.multiplefilters) for (var o = 0; o < l.length; o++) if (e(l[o]).attr("data-name") != i) { var s = this.parseFilterValues(e(l[o]).attr("data-filterdata")); 0 != s.length && (a.length > 0 && (a += "&"), a += this.getFilterQueryData(e(l[o]).attr("data-name"), s)) } window.location.search = t + a }, t.prototype.getFilterQueryData = function (e, t) { for (var i = "", n = 0; n < t.length; n++) i += "grid-filter=" + encodeURIComponent(e) + "__" + t[n].filterType + "__" + encodeURIComponent(t[n].filterValue), n != t.length - 1 && (i += "&"); return i }, t.prototype.openMenuOnClick = function (t) { if (e(this).hasClass("clicked")) return !0; t.closeOpenedPopups(), e(this).addClass("clicked"); var i = e(this).find(".dropdown-menu"); return 0 == i.length ? !0 : (i.show(), i.addClass("opened"), t.openedMenuBtn = e(this), e(document).bind("click.gridmvc", function (e) { t.documentCallback(e, t) }), !1) }, t.prototype.documentCallback = function (t, i) { t = t || event; var n = t.target || t.srcElement, r = e(".dropdown-menu.opened").get(0), l = e("html").get(0); if ("undefined" != typeof r) do { if (r == n) return; l == n && (r.style.display = "none", e(r).removeClass("opened")), n = n.parentNode } while (n); null != i.openedMenuBtn && i.openedMenuBtn.removeClass("clicked"), e(document).unbind("click.gridmvc") }, t.prototype.closeOpenedPopups = function () { var t = e(".dropdown-menu.opened"); t.hide(), t.removeClass("opened"), null != this.openedMenuBtn && this.openedMenuBtn.removeClass("clicked") }, t.prototype.selectable = function (e) { this.options.selectable = e }, t }(window.jQuery), "undefined" == typeof GridMvc.lang && (GridMvc.lang = {}), GridMvc.lang.en = { filterTypeLabel: "Type: ", filterValueLabel: "Value:", applyFilterButtonText: "Apply", filterSelectTypes: { Equals: "Equals", StartsWith: "StartsWith", Contains: "Contains", EndsWith: "EndsWith", GreaterThan: "Greater than", LessThan: "Less than", GreaterThanOrEquals: "Greater than or equals", LessThanOrEquals: "Less than or equals" }, code: "en", boolTrueLabel: "Yes", boolFalseLabel: "No", clearFilterLabel: "Clear filter" }, TextFilterWidget = function (e) { function t() { } return t.prototype.getAssociatedTypes = function () { return ["System.String"] }, t.prototype.onShow = function () { var e = this.container.find(".grid-filter-input"); e.length <= 0 || e.focus() }, t.prototype.showClearFilterButton = function () { return !0 }, t.prototype.onRender = function (e, t, i, n, r) { this.cb = r, this.container = e, this.lang = t, this.value = n.length > 0 ? n[0] : { filterType: 1, filterValue: "" }, this.renderWidget(), this.registerEvents() }, t.prototype.renderWidget = function () { var e = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + ("1" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="2" ' + ("2" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Contains + '</option>                            <option value="3" ' + ("3" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.StartsWith + '</option>                            <option value="4" ' + ("4" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.EndsWith + '</option>                        </select>                    </div>                    <div class="form-group">                        <label>' + this.lang.filterValueLabel + '</label>                        <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                    </div>                    <div class="grid-filter-buttons">                        <button type="button" class="btn btn-primary grid-apply" >' + this.lang.applyFilterButtonText + "</button>                    </div>"; this.container.append(e) }, t.prototype.registerEvents = function () { var e = this.container.find(".grid-apply"), t = this; e.click(function () { var e = t.container.find(".grid-filter-type").val(), i = t.container.find(".grid-filter-input").val(), n = [{ filterType: e, filterValue: i }]; t.cb(n) }), this.container.find(".grid-filter-input").keyup(function (t) { 13 == t.keyCode && e.click(), 27 == t.keyCode && GridMvc.closeOpenedPopups() }) }, t }(window.jQuery), NumberFilterWidget = function (e) { function t() { } return t.prototype.showClearFilterButton = function () { return !0 }, t.prototype.getAssociatedTypes = function () { return ["System.Int32", "System.Double", "System.Decimal", "System.Byte", "System.Single", "System.Float", "System.Int64", "System.Int16", "System.UInt64", "System.UInt32", "System.UInt16"] }, t.prototype.onShow = function () { var e = this.container.find(".grid-filter-input"); e.length <= 0 || e.focus() }, t.prototype.onRender = function (e, t, i, n, r) { this.cb = r, this.container = e, this.lang = t, this.typeName = i, this.value = n.length > 0 ? n[0] : { filterType: 1, filterValue: "" }, this.renderWidget(), this.registerEvents() }, t.prototype.renderWidget = function () { var e = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + ("1" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="5" ' + ("5" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.GreaterThan + '</option>                            <option value="6" ' + ("6" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.LessThan + '</option>                        </select>                    </div>                    <div class="form-group">                        <label>' + this.lang.filterValueLabel + '</label>                        <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                    </div>                    <div class="grid-filter-buttons">                        <button type="button" class="btn btn-primary grid-apply">' + this.lang.applyFilterButtonText + "</button>                    </div>"; this.container.append(e) }, t.prototype.registerEvents = function () { var e = this, t = this.container.find(".grid-apply"); t.click(function () { var t = e.container.find(".grid-filter-type").val(), i = e.container.find(".grid-filter-input").val(), n = [{ filterType: t, filterValue: i }]; e.cb(n) }); var i = this.container.find(".grid-filter-input"); i.keyup(function (e) { 13 == e.keyCode && t.click(), 27 == e.keyCode && GridMvc.closeOpenedPopups() }).keypress(function (t) { return e.validateInput.call(e, t) }), "System.Byte" == this.typeName && i.attr("maxlength", "3") }, t.prototype.validateInput = function (e) { var t = e || window.event, i = t.keyCode || t.which; i = String.fromCharCode(i); var n; switch (this.typeName) { case "System.Byte": case "System.Int32": case "System.Int64": case "System.UInt32": case "System.UInt64": n = /[0-9]/; break; default: n = /[0-9]|\.|\,/ } n.test(i) || (t.returnValue = !1, t.preventDefault && t.preventDefault()) }, t }(window.jQuery), DateTimeFilterWidget = function (e) { function t() { } return t.prototype.getAssociatedTypes = function () { return ["System.DateTime", "System.Date", "System.DateTimeOffset"] }, t.prototype.showClearFilterButton = function () { return !0 }, t.prototype.onRender = function (t, i, n, r, l, a) { this.datePickerIncluded = "undefined" != typeof e.fn.datepicker, this.cb = l, this.data = a, this.typeName = n, this.container = t, this.lang = i, this.value = r.length > 0 ? r[0] : { filterType: 1, filterValue: "" }, this.renderWidget(), this.registerEvents() }, t.prototype.renderWidget = function () { var e = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + ("1" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="5" ' + ("5" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.GreaterThan + '</option>                            <option value="6" ' + ("6" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.LessThan + "</option>                        </select>                    </div>" + (this.datePickerIncluded ? '<div class="grid-filter-datepicker"></div>' : '<div class="form-group">                                <label>' + this.lang.filterValueLabel + '</label>                                <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                             </div>                             <div class="grid-filter-buttons">                                <input type="button" class="btn btn-primary grid-apply" value="' + this.lang.applyFilterButtonText + '" />                             </div>'); if (this.container.append(e), this.datePickerIncluded) { var t = this.data || {}; t.format = t.format || "yy-mm-dd", t.language = t.language || this.lang.code; var i = this, n = this.container.find(".grid-filter-datepicker"); n.datepicker({ changeMonth: !0, changeYear: !0, dateFormat: "yy-mm-dd", onSelect: function (e, t) { var n = i.container.find(".grid-filter-type").val(), r = [{ filterType: n, filterValue: e }]; i.cb(r) } }), this.value.filterValue && n.datepicker("setDate", this.value.filterValue) } }, t.prototype.registerEvents = function () { var e = this, t = this.container.find(".grid-apply"); t.click(function () { var t = e.container.find(".grid-filter-type").val(), i = e.container.find(".grid-filter-input").val(), n = [{ filterType: t, filterValue: i }]; e.cb(n) }), this.container.find(".grid-filter-input").keyup(function (e) { 13 == e.keyCode && t.click() }) }, t }(window.jQuery), BooleanFilterWidget = function (e) { function t() { } return t.prototype.getAssociatedTypes = function () { return ["System.Boolean"] }, t.prototype.showClearFilterButton = function () { return !0 }, t.prototype.onRender = function (e, t, i, n, r) { this.cb = r, this.container = e, this.lang = t, this.value = n.length > 0 ? n[0] : { filterType: 1, filterValue: "" }, this.renderWidget(), this.registerEvents() }, t.prototype.renderWidget = function () { var e = "<label>" + this.lang.filterValueLabel + '</label>                    <ul class="menu-list">                        <li><a class="grid-filter-choose ' + ("true" == this.value.filterValue ? "choose-selected" : "") + '" data-value="true" href="javascript:void(0);">' + this.lang.boolTrueLabel + '</a></li>                        <li><a class="grid-filter-choose ' + ("false" == this.value.filterValue ? "choose-selected" : "") + '" data-value="false" href="javascript:void(0);">' + this.lang.boolFalseLabel + "</a></li>                    </ul>"; this.container.append(e) }, t.prototype.registerEvents = function () { var t = this, i = this.container.find(".grid-filter-choose"); i.click(function () { var i = [{ filterType: "1", filterValue: e(this).attr("data-value") }]; t.cb(i) }) }, t }(window.jQuery), function (e) { e && e(function () { e(".grid-mvc").each(function () { e(".grid-mvc").gridmvc() }) }) }(window.jQuery);